import pandas as pd
import numpy as np
from sklearn.linear_model import ElasticNetCV
from sklearn.metrics import mean_squared_error
from sklearn.preprocessing import StandardScaler

import warnings

warnings.filterwarnings("ignore")

def prepare_data(xr_path, fwd_path):
    df_xr = pd.read_excel(xr_path)
    df_fwd = pd.read_excel(fwd_path)

    df_xr.columns = [c.strip().lower() for c in df_xr.columns]
    df_fwd.columns = [c.strip().lower() for c in df_fwd.columns]

    df_xr['date'] = pd.to_datetime(df_xr['date'])
    df_fwd['date'] = pd.to_datetime(df_fwd['date'])

    df = pd.merge(df_xr, df_fwd, on="date", suffixes=("_xr", "_fwd"))
    df.set_index("date", inplace=True)

    
    return df

def run_elastic_net_forecast(df, target_maturity, start_oos="1990-01-01"):
    target_col = f"{target_maturity} m_xr"
    fwd_cols = [col for col in df.columns if col.endswith("m_fwd")]

    df = df[[target_col] + fwd_cols].dropna()

    oos_start_idx = df.index.get_loc(pd.to_datetime(start_oos))
    r2_oos_list = []
    preds = []
    rets = []
    dates = []

    for t in range(oos_start_idx, len(df) - 1):
        df_train = df.iloc[:t]
        df_test = df.iloc[[t]]

        X_train = df_train[fwd_cols].values
        y_train = df_train[target_col].values

        X_test = df_test[fwd_cols].values
        y_test = df_test[target_col].values

        # Standardize features
        scaler = StandardScaler().fit(X_train)
        X_train = scaler.transform(X_train)
        X_test = scaler.transform(X_test)

        model = ElasticNetCV(cv=5, l1_ratio=0.5).fit(X_train, y_train)
        y_pred = model.predict(X_test)[0]

        preds.append(y_pred)
        rets.append(y_test[0])
        dates.append(df.index[t])

    # Compute out-of-sample R²
    preds = np.array(preds)
    rets = np.array(rets)
    benchmark = [np.mean(rets[:i]) if i > 0 else 0 for i in range(len(rets))]
    mse_model = mean_squared_error(rets, preds)
    mse_benchmark = mean_squared_error(rets, benchmark)
    r2_oos = 1 - mse_model / mse_benchmark

    results = pd.DataFrame({
        "date": dates,
        "actual": rets,
        "predicted": preds,
        "benchmark_mean": benchmark
    })

    return r2_oos, results

if __name__ == "__main__":
    # Input files
    excess_returns_file = "data-folder\Extracted_excess_returns.xlsx"
    forward_rates_file = "data-folder\Extracted_fwd_rates.xlsx"

    df_all = prepare_data(excess_returns_file, forward_rates_file)

    maturities = [24, 36, 48, 60, 84, 120]

    print("Elastic Net Regression Results (OOS R²):\n")
    for mat in maturities:
        try:
            r2, df_results = run_elastic_net_forecast(df_all, mat)
            print(f"{mat}m: {r2:.4f}")
        except Exception as e:
            print(f"{mat}m: Error - {e}")
