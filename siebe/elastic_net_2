import pandas as pd
import numpy as np
from sklearn.linear_model import LinearRegression
from sklearn.decomposition import PCA
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import PredefinedSplit

# === R² OOS function ===
def R2OOS(y_true, y_forecast, expanding_mean):
    y_true = np.array(y_true)
    y_forecast = np.array(y_forecast)
    y_mean = np.array(expanding_mean)
    SSres = np.nansum((y_true - y_forecast)**2)
    SStot = np.nansum((y_true - y_mean)**2)
    return 1 - SSres / SStot

# === SETTINGS ===
EXCESS_RETURN_PATH = "data-folder/Fwd rates and xr/xr.xlsx"
FWD_RATE_PATH = "data-folder/Fwd rates and xr/forward_rates.xlsx"
OOS_START_DATE = "1990-01-01"
OOS_END_DATE = "2018-12-01"
FULL_START_DATE = "1971-08-01"

# === Load data ===
df_xr = pd.read_excel(EXCESS_RETURN_PATH)
df_fwd = pd.read_excel(FWD_RATE_PATH)
df_xr.columns = [c.strip().lower() for c in df_xr.columns]
df_fwd.columns = [c.strip().lower() for c in df_fwd.columns]
df_xr["date"] = pd.to_datetime(df_xr["date"])
df_fwd["date"] = pd.to_datetime(df_fwd["date"])

df = pd.merge(df_xr, df_fwd, on="date", suffixes=("_xr", "_fwd"))
df.set_index("date", inplace=True)

# Define maturities
maturities = ["2 y", "3 y", "4 y", "5 y", "7 y", "10 y"]
target_cols = [m + "_xr" for m in maturities]
fwd_cols = [m + "_fwd" for m in maturities]

df = df[(df.index >= FULL_START_DATE) & (df.index <= OOS_END_DATE)].copy()

Y = df[target_cols].to_numpy()
Xexog = df[fwd_cols].to_numpy()

n_obs = Y.shape[0]
n_maturities = Y.shape[1]

# Prepare expanding mean
expanding_mean_check = np.full_like(Y, np.nan, dtype=np.float64)
for t in range(n_obs):
    expanding_mean_check[t, :] = Y[: t + 1, :].mean(axis=0)
expanding_mean_df = pd.DataFrame(expanding_mean_check, columns=maturities, index=df.index)
expanding_mean_df = expanding_mean_df.iloc[220:]

start_oos_idx = df.index.get_loc(pd.to_datetime(OOS_START_DATE))
y_preds = np.full_like(Y, np.nan)

print("Running PCA regression with expanding window...\n")

def PCA_NoMacro_Plain(Xexog, Y, n_components=5):
    """
    Standardizes, applies PCA, then fits a LinearRegression on the training set,
    and generates one-step-ahead prediction for the last row.
    """
    # Split train/test for this step
    Xexog_train = Xexog[:-1, :]
    Y_train = Y[:-1, :]
    Xexog_test = Xexog[-1, :].reshape(1, -1)

    # Standardize
    Xexogscaler_train = StandardScaler()
    Xexog_train = Xexogscaler_train.fit_transform(Xexog_train)
    Xexog_test = Xexogscaler_train.transform(Xexog_test)

    # Create validation folds (last 15% of train as validation)
    N_train = int(np.round(Xexog_train.shape[0] * 0.85))
    N_val = Xexog_train.shape[0] - N_train
    test_fold = np.concatenate((np.full(N_train, -1), np.full(N_val, 0)))
    ps = PredefinedSplit(test_fold.tolist())

    # Initialize predictions
    Ypred = np.full((1, Y_train.shape[1]), np.nan)

    # For each maturity/column, fit PCA + LinearRegression
    for i in range(Y_train.shape[1]):
        # PCA on the training input for this iteration
        pca_model = PCA(n_components=n_components).fit(Xexog_train)
        X_train_pca = pca_model.transform(Xexog_train)
        X_test_pca = pca_model.transform(Xexog_test)

        # Fit simple LinearRegression
        linreg = LinearRegression()
        linreg.fit(X_train_pca, Y_train[:, i])
        Ypred[0, i] = linreg.predict(X_test_pca)[0]
    return Ypred

# Expanding window loop
for t in range(start_oos_idx, n_obs):
    y_preds[t, :] = PCA_NoMacro_Plain(Xexog[: t + 1, :], Y[: t + 1, :], n_components=5)
    print(f"Forecast {t + 1 - start_oos_idx}/{n_obs - start_oos_idx} ({df.index[t].strftime('%Y-%m')})")

# Report results
print("\n=== PCA OOS R² Results ===")
for i, col in enumerate(maturities):
    y_true = Y[start_oos_idx:, i]
    y_forecast = y_preds[start_oos_idx:, i]
    expanding_mean_for_maturity = expanding_mean_df[col].iloc[0 : len(y_true)].values
    r2 = R2OOS(y_true, y_forecast, expanding_mean_for_maturity)
    print(f"{col}: {r2:.4f}")
